{
  "_args": [
    [
      {
        "raw": "kilt@2.0.1",
        "scope": null,
        "escapedName": "kilt",
        "name": "kilt",
        "rawSpec": "2.0.1",
        "spec": "2.0.1",
        "type": "version"
      },
      "/Users/theguestfamily/Desktop/Social Network Web App/node_modules/hapi"
    ]
  ],
  "_from": "kilt@2.0.1",
  "_id": "kilt@2.0.1",
  "_inCache": true,
  "_location": "/hapi/kilt",
  "_nodeVersion": "6.0.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/kilt-2.0.1.tgz_1463813423240_0.3291585866827518"
  },
  "_npmUser": {
    "name": "hueniverse",
    "email": "eran@hammer.io"
  },
  "_npmVersion": "3.8.6",
  "_phantomChildren": {},
  "_requested": {
    "raw": "kilt@2.0.1",
    "scope": null,
    "escapedName": "kilt",
    "name": "kilt",
    "rawSpec": "2.0.1",
    "spec": "2.0.1",
    "type": "version"
  },
  "_requiredBy": [
    "/hapi"
  ],
  "_resolved": "https://registry.npmjs.org/kilt/-/kilt-2.0.1.tgz",
  "_shasum": "6e3df779df1b89f499819da9252e6f15cd017f33",
  "_shrinkwrap": null,
  "_spec": "kilt@2.0.1",
  "_where": "/Users/theguestfamily/Desktop/Social Network Web App/node_modules/hapi",
  "bugs": {
    "url": "https://github.com/hapijs/kilt/issues"
  },
  "dependencies": {
    "hoek": "4.x.x"
  },
  "description": "Combines multiple event emitters into a single emitter",
  "devDependencies": {
    "code": "3.x.x",
    "lab": "10.x.x"
  },
  "directories": {},
  "dist": {
    "shasum": "6e3df779df1b89f499819da9252e6f15cd017f33",
    "tarball": "https://registry.npmjs.org/kilt/-/kilt-2.0.1.tgz"
  },
  "engines": {
    "node": ">=4.0.0"
  },
  "gitHead": "19fb9e2238de2502005e64676de1e14a5265b72e",
  "homepage": "https://github.com/hapijs/kilt#readme",
  "keywords": [
    "emitter",
    "merge",
    "combine"
  ],
  "license": "BSD-3-Clause",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "hueniverse",
      "email": "eran@hueniverse.com"
    },
    {
      "name": "nexxy",
      "email": "emily@contactvibe.com"
    }
  ],
  "name": "kilt",
  "optionalDependencies": {},
  "readme": "#kilt\n\nCombines multiple event emitters into a single emitter.\n\n[![Build Status](https://secure.travis-ci.org/hapijs/kilt.svg)](http://travis-ci.org/hapijs/kilt)\n\nLead Maintainer - [Emily Rose](https://github.com/nexxy)\n\n## Usage\n\nInstallation:\n\n```bash\n$ npm install --save kilt\n```\n\nInstantiate a kilt instance with the event emitters to combine and listen for\nevents on the new kilt instance. Kilt derives from `EventEmitter` and may also\nbe used to emit events.\n\n```js\nvar Events = require('events');\nvar Kilt   = require('kilt');\n\nvar emitter1 = new Events.EventEmitter();\nvar emitter2 = new Events.EventEmitter();\n\nvar kilt = new Kilt([emitter1, emitter2]);\n\n// A single handler for both emitters.\nkilt.on('hello', function (data) {\n    console.log(data);\n});\n\n// Emit events from multiple emitters.\nemitter1.emit('hello', 'Hello from emitter1');\nemitter2.emit('hello', 'Hello from emitter2');\n\n// Emit a event using kilt.\nkilt.emit('hello', 'Hello from Kilt');\n```\n\nOutput:\n\n```bash\nHello from emitter1\nHello from emitter2\nHello from kilt\n```\n\n### Methods\n\n#### `Kilt([emitter(s)])`\n\nKilt constructor which accepts optional emitters to manage.\n\n```js\nvar kilt = new Kilt();\n... = new Kilt(emitter);\n... = new Kilt([emitter]);\n... = new Kilt([emitter1, emitter2]);\n```\n\n##### `addEmitter(emitter)`\n\nAdd an emitter for kilt to manage.\n\n```js\nvar emitter = new Events.Emitter();\nkilt.addEmitter(emitter);\n```\n\n##### `on(type, listener)`\n\nAttach a listener to all emitters with the specified type.\n\n```js\nkilt.on('example', function (data) {\n    console.log(data);\n});\n```\n\n##### `once(type, listener)`\n\nAttach a listener to all emitters with the specified type that will only fire\nonce.\n\n```js\nkilt.once('example', console.log.bind(console, '\"example\" event emitted once with data:'));\n```\n\n##### `removeListener(type, listener)`\n\nRemove the specified listener.\n\n```js\nvar emitter = new Events.Emitter();\nvar listener = function () {\n    return;\n};\n\nkilt.addEmitter(emitter);\n\n// Attach listener.\nkilt.on('example', listener);\n\n// Remove listener.\nkilt.removeListener('example', listener);\n```\n\n##### `removeAllListeners([type])`\n\nRemove all listeners. Optionally, you may specify the type of listeners to\nremove.\n\n```js\n// Attach listeners.\nkilt.on('example', ...);\nkilt.on('example', ...);\nkilt.on('example', ...);\nkilt.on('other', ...);\n\n// Only remove listeners of a specific type.\nkilt.removeAllListeners('example');\n\n// Remove all listeners.\nkilt.removeAllListeners();\n```\n\n##### `emit(type[, data])`\n\nEmit the specified event with the specified, optional data.\n\n```js\nvar emitter = new Events.Emitter();\nvar kilt = new Kilt(emitter);\n\n// Attach listener.\nkilt.on('example', console.log.bind(console, '\"example\" event emitted with data:'));\n\n// Emit event on kilt.\nkilt.emit('example', 'emitted');\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/hapijs/kilt.git"
  },
  "scripts": {
    "test": "lab -a code -t 100 -L",
    "test-cov-html": "lab -r html -o coverage.html -a code -L"
  },
  "version": "2.0.1"
}
